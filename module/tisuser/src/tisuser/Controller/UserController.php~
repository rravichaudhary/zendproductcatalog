<?php

namespace tisuser\Controller; 

use Zend\Mvc\Controller\AbstractActionController; 
use Zend\View\Model\ViewModel; 
use tisuser\Form\UserForm as UserForm; 
use tisuser\Form\userValidator; 
use tisuser\Model\User; 

class UserController extends AbstractActionController{


protected $userTable;
protected $authservice;
public function addAction(){

$form = new UserForm(); 
	
    $request = $this->getRequest(); 

    if($request->isPost()) 
    { 
        $user = new User(); 
        
        $formValidator = new userValidator();
				
         
        // $form->setInputFilter($formValidator->getInputFilter()); 
        // $form->setData($request->getPost()); 

		 //if($form->isValid())   { 
		//print 'valid'; die();
           $user_data =  $user->exchangeArray($request->getPost());
			var_dump($user_data);
		   $this->getUserTable()->saveUser($request->getPost());
         
   // } 
    
    return new ViewModel(array('form' => $form)); 
} 
  return new ViewModel(array('form' => $form));
}

public function loginAction(){
$form = new UserForm(); 
$form->remove('cpassword');
$request = $this->getRequest();
if($request->isPost()){

//process login

$user_name = $request->getPost('username');
$password =  $request->getPost('password');
$redirect = $request->getPost('redirect' ,'/');

$this->auth($user_name,$password,$redirect);
}

return array('form' => $form);

}

public function auth($username='',$password='',$redirect=''){
							$this->getAuthService()->getAdapter()
                            ->setIdentity($username)
						    ->setCredential($password);
                                        
							$result = $this->getAuthService()->authenticate();
							
							if ($result->isValid()) {
							
							return $this->redirect()->toUrl($redirect);

							}else{
							return $this->redirect()->toUrl($redirect);
							}

}
public function logoutAction(){
		//$this->getServiceLocator()->get('AuthService')->resetAdapters();
        //$this->getServiceLocator()->get('AuthService')->logoutAdapters();
        $this->getAuthService()->clearIdentity();
		return $this->redirect()->toRoute('home');
}

public function indexAction() 
{ 
if (! $this->getAuthService()->hasIdentity()){
            return $this->redirect()->toRoute('login');
        }
        
        return new ViewModel();



}
  public function getAuthService()
    {
        if (! $this->authservice) {
            $this->authservice = $this->getServiceLocator()
                                      ->get('AuthService');
        }
         
        return $this->authservice;
    }

 public function getUserTable()
    {
        if (!$this->userTable) {
            $sm = $this->getServiceLocator();
            $this->userTable = $sm->get('user_table');
        }
        return $this->userTable;
    }


}
